# Day 9: Mirage Maintenance

```elixir
ExUnit.configure(exclude: [:skip])
ExUnit.start(autorun: false)
```

## Solution

```elixir
defmodule Day9 do
  def part1(input) do
    input
    |> parse_input()
    |> Enum.map(&extrapolate/1)
    |> Enum.sum()
  end

  def part2(input) do
    input
    |> parse_input()
    |> Enum.map(&Enum.reverse/1)
    |> Enum.map(&extrapolate/1)
    |> Enum.sum()
  end

  def parse_input(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(&parse_history/1)
  end

  defp parse_history(line) do
    line
    |> String.split()
    |> Enum.map(&String.to_integer/1)
  end

  def extrapolate(history) do
    history
    |> Enum.chunk_every(2, 1, :discard)
    |> Enum.map_reduce({true, nil}, fn [a, b], {all_zeroes, _last_number} ->
      diff = b - a
      {diff, {all_zeroes and diff == 0, b}}
    end)
    |> case do
      {_, {true, last_number}} -> last_number
      {history_diff, {false, last_number}} -> last_number + extrapolate(history_diff)
    end
  end
end

defmodule Day9Test do
  use ExUnit.Case

  @example_input """
  0 3 6 9 12 15
  1 3 6 10 15 21
  10 13 16 21 30 45
  """

  test ".parse/1" do
    assert [
             [0, 3, 6, 9, 12, 15],
             [1, 3, 6, 10, 15, 21],
             [10, 13, 16, 21, 30, 45]
           ] == Day9.parse_input(@example_input)
  end

  test "Part 1: Example" do
    assert 114 == Day9.part1(@example_input)
  end

  test "Part 1: Input File" do
    assert 1_806_615_041 ==
             "/Users/polmiro/Development/aoc/2023/day-09/input.txt"
             |> File.read!()
             |> Day9.part1()
  end

  test "Part 2: Example" do
    assert 2 == Day9.part2(@example_input)
  end

  test "Part 2: Input File" do
    assert 1211 ==
             "/Users/polmiro/Development/aoc/2023/day-09/input.txt"
             |> File.read!()
             |> Day9.part2()
  end
end

ExUnit.run()
```
