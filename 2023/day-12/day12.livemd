# Day 12: Hot Springs

```elixir
Mix.install([
  {:memoize, "~> 1.4"}
])

ExUnit.configure(exclude: [:skip])
ExUnit.start(autorun: false)
```

## Solution

```elixir
defmodule Day12 do
  use Memoize

  def part1(input) do
    input
    |> parse_records()
    |> Enum.map(&count_arrangements/1)
    |> Enum.sum()
  end

  def part2(input) do
    input
    |> parse_records()
    |> Enum.map(&unfold/1)
    |> Enum.map(&count_arrangements/1)
    |> Enum.sum()
  end

  def parse_records(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn row ->
      [part1, part2] = String.split(row, " ")

      states =
        part1
        |> String.codepoints()
        |> Enum.map(fn
          "#" -> :d
          "." -> :o
          "?" -> :u
        end)

      dmg_counts =
        part2
        |> String.split(",", trim: true)
        |> Enum.map(&String.to_integer/1)

      {states, dmg_counts}
    end)
  end

  def unfold({states, dmg_counts}) do
    states =
      1..5
      |> Enum.map(fn _ -> states end)
      |> Enum.intersperse(:u)
      |> List.flatten()

    dmg_counts =
      dmg_counts
      |> List.duplicate(5)
      |> List.flatten()

    {states, dmg_counts}
  end

  def count_arrangements({states, dmg_counts}) do
    do_count_arr(states, dmg_counts, 0)
  end

  # Correct: Nothing left and nothing more to be found
  defmemop(do_count_arr([], [], 0), do: 1)

  # Correct: Last batch with nothing left
  defmemop(do_count_arr([], [n], n), do: 1)

  # Skip operational
  defmemop(do_count_arr([:o | s], cts, 0), do: do_count_arr(s, cts, 0))

  # Finished batch
  defmemop(do_count_arr([:o | s], [n | cts], n), do: do_count_arr(s, cts, 0))

  # Start batch
  defmemop(do_count_arr([:d | s], cts, 0), do: do_count_arr(s, cts, 1))

  # Extend batch
  defmemop(do_count_arr([:d | s], cts, n) when n > 0, do: do_count_arr(s, cts, n + 1))

  # Unknown   
  defmemop do_count_arr([:u | s], cts, n) do
    do_count_arr([:o | s], cts, n) + do_count_arr([:d | s], cts, n)
  end

  # Catch all
  defmemop(do_count_arr(_, _, _), do: 0)
end

defmodule Day12Test do
  use ExUnit.Case

  @example_input """
  ???.### 1,1,3
  .??..??...?##. 1,1,3
  ?#?#?#?#?#?#?#? 1,3,1,6
  ????.#...#... 4,1,1
  ????.######..#####. 1,6,5
  ?###???????? 3,2,1
  """

  test ".count_arrangements/2" do
    assert 1 == Day12.count_arrangements({[], []})

    assert 1 == Day12.count_arrangements({[:o], []})
    assert 0 == Day12.count_arrangements({[:d], []})
    assert 1 == Day12.count_arrangements({[:u], []})

    assert 0 == Day12.count_arrangements({[:o], [1]})
    assert 1 == Day12.count_arrangements({[:d], [1]})
    assert 1 == Day12.count_arrangements({[:u], [1]})

    assert 1 == Day12.count_arrangements({[:o, :o], []})
    assert 0 == Day12.count_arrangements({[:o, :o], [1]})
    assert 0 == Day12.count_arrangements({[:o, :o], [2]})
    assert 0 == Day12.count_arrangements({[:d, :d], []})
    assert 0 == Day12.count_arrangements({[:d, :d], [1]})
    assert 1 == Day12.count_arrangements({[:d, :d], [2]})

    assert 1 == Day12.count_arrangements({[:u, :u, :u, :o, :d, :d, :d], [1, 1, 3]})
  end

  test "Part 1: Example" do
    assert 21 == Day12.part1(@example_input)
  end

  test "Part 1: Input File" do
    assert 7090 ==
             "/Users/polmiro/Development/aoc/2023/day-12/input.txt"
             |> File.read!()
             |> Day12.part1()
  end

  test "Part 2: Example" do
    assert 525_152 == Day12.part2(@example_input)
  end

  test "Part 2: Input File" do
    assert 6_792_010_726_878 ==
             "/Users/polmiro/Development/aoc/2023/day-12/input.txt"
             |> File.read!()
             |> Day12.part2()
  end
end

ExUnit.run()
```
