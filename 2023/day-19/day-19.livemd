# Day 19: Aplenty

```elixir
ExUnit.configure(exclude: [:skip])
ExUnit.start(autorun: false)
```

## Solution

```elixir
defmodule Day19 do
  def part1(input) do
    {workflows, part_ratings} = parse_input(input)

    Enum.reduce(part_ratings, 0, fn part_rating, acc ->
      case execute_operations(workflows, part_rating, workflows["in"]) do
        "A" -> acc + (Map.values(part_rating) |> Enum.sum())
        "R" -> acc
      end
    end)
  end

  def part2(input) do
    {workflows, _} = parse_input(input)

    combinations = %{
      "x" => 1..4000//1,
      "m" => 1..4000//1,
      "a" => 1..4000//1,
      "s" => 1..4000//1
    }

    count(combinations, workflows, workflows["in"])
  end

  def count(combinations, workflows, operations)

  def count(combinations, _w, [{:outcome, "A"} | _]) do
    combinations
    |> Map.values()
    |> Enum.map(&Range.size/1)
    |> Enum.reduce(&Kernel.*/2)
  end

  def count(_c, _w, [{:outcome, "R"} | _]), do: 0
  def count(c, w, [{:workflow, name} | _]), do: count(c, w, w[name])

  def count(c, w, [op = {_, _, _, outcome} | rest]) do
    {alt1, alt2} = alternatives(c, op)
    count(alt1, w, [outcome]) + count(alt2, w, rest)
  end

  def alternatives(combinations, {c, op, v, _}) do
    from..to = combinations[c]

    {range1, range2} =
      case op do
        "<" -> {from..min(to, v - 1), max(from, v)..to}
        ">" -> {max(from, v + 1)..to, from..min(to, v)}
      end

    {Map.put(combinations, c, range1), Map.put(combinations, c, range2)}
  end

  defp parse_input(input) do
    [part1, part2] = String.split(input, "\n\n", parts: 2, trim: true)
    workflows = parse_workflows(part1)
    part_ratings = parse_part_ratings(part2)
    {workflows, part_ratings}
  end

  @doc """
  Parses the worflows of the input.

  ## Examples

    iex> Day19.parse_workflows("px{a<2006:qkq,m>2090:A,rfg}")
    %{"px" => [{"a", "<", 2006, {:workflow, "qkq"}}, {"m", ">", 2090, {:outcome, "A"}}, {:workflow, "rfg"}]}
  """
  def parse_workflows(input) do
    input
    |> String.split("\n")
    |> Enum.map(fn line ->
      [workflow_name, text] = String.split(line, "{", parts: 2)

      operations =
        text
        |> String.trim_trailing("}")
        |> String.split(",")
        |> Enum.map(fn op_text ->
          case Regex.run(~r/(\w+)([\<\>])(\w+):(\w+)/, op_text) do
            [_, c, o, v, p] -> {c, o, String.to_integer(v), parse_outcome(p)}
            nil -> parse_outcome(op_text)
          end
        end)

      {workflow_name, operations}
    end)
    |> Map.new()
  end

  def parse_outcome(outcome) when outcome in ["A", "R"], do: {:outcome, outcome}
  def parse_outcome(workflow_name), do: {:workflow, workflow_name}

  @doc """
  Parses the ratings of an input.

  ## Examples

    iex> Day19.parse_part_ratings("{x=787,m=2655,a=1222,s=2876}")
    [%{"s" => 2876, "a" => 1222, "m" => 2655, "x" => 787}]
  """
  def parse_part_ratings(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn line ->
      [_, x, m, a, s] = Regex.run(~r/{x=(\d+),m=(\d+),a=(\d+),s=(\d+)}/, line)

      %{
        "x" => String.to_integer(x),
        "m" => String.to_integer(m),
        "a" => String.to_integer(a),
        "s" => String.to_integer(s)
      }
    end)
  end

  @doc """
  Executes the operations of workflow on a part rating.

  ## Examples

    iex> workflows = %{"px" => [{"a", "<", 2006, {:outcome, "R"}}, {"m", ">", 2090, "A"}, "rfg"]}
    iex> part_rating = %{"s" => 2876, "a" => 1222, "m" => 2655, "x" => 787}
    iex> Day19.execute_operations(workflows, part_rating, workflows["px"])
    "R"
  """

  def execute_operations(workflows, part_rating, [operation | operations]) do
    case execute_operation(part_rating, operation) do
      {:workflow, name} -> execute_operations(workflows, part_rating, workflows[name])
      {:outcome, outcome} -> outcome
      _ -> execute_operations(workflows, part_rating, operations)
    end
  end

  @doc """
  Executes an operation on a part rating.

  ## Examples

    iex> operation = {"a", "<", 2006, {:workflow, "qkq"}}
    iex> part_rating = %{"s" => 2876, "a" => 1222, "m" => 2655, "x" => 787}
    iex> Day19.execute_operation(part_rating, operation)
    {:workflow, "qkq"}
  """
  def execute_operation(part_rating, {c, "<", v, outcome}) do
    if part_rating[c] < v, do: outcome, else: nil
  end

  def execute_operation(part_rating, {c, ">", v, outcome}) do
    if part_rating[c] > v, do: outcome, else: nil
  end

  def execute_operation(_, outcome), do: outcome
end

defmodule Day19Test do
  use ExUnit.Case

  @example_input """
  px{a<2006:qkq,m>2090:A,rfg}
  pv{a>1716:R,A}
  lnx{m>1548:A,A}
  rfg{s<537:gd,x>2440:R,A}
  qs{s>3448:A,lnx}
  qkq{x<1416:A,crn}
  crn{x>2662:A,R}
  in{s<1351:px,qqz}
  qqz{s>2770:qs,m<1801:hdj,R}
  gd{a>3333:R,R}
  hdj{m>838:A,pv}

  {x=787,m=2655,a=1222,s=2876}
  {x=1679,m=44,a=2067,s=496}
  {x=2036,m=264,a=79,s=2244}
  {x=2461,m=1339,a=466,s=291}
  {x=2127,m=1623,a=2188,s=1013}
  """

  test "Part 1: Example Input" do
    assert 19114 == Day19.part1(@example_input)
  end

  test "Part 1: Input File" do
    assert 332_145 ==
             "/Users/polmiro/Development/aoc/2023/day-19/input.txt"
             |> File.read!()
             |> Day19.part1()
  end

  test "Part 2: Example Input" do
    assert 167_409_079_868_000 == Day19.part2(@example_input)
  end

  test "Part 2: Input File" do
    assert 136_661_579_897_555 ==
             "/Users/polmiro/Development/aoc/2023/day-19/input.txt"
             |> File.read!()
             |> Day19.part2()
  end
end

ExUnit.run()
```
