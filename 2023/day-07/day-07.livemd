# Day 7: Camel Cards

```elixir
ExUnit.configure(exclude: [:skip])
ExUnit.start(autorun: false)
```

## Solution

```elixir
defmodule Day7 do
  @hand_type_strengths [
                         :five_of_a_kind,
                         :four_of_a_kind,
                         :full_house,
                         :three_of_a_kind,
                         :two_pair,
                         :one_pair,
                         :high_card
                       ]
                       |> Enum.with_index()
                       |> Map.new()

  @card_strengths "A, K, Q, J, T, 9, 8, 7, 6, 5, 4, 3, 2"
                  |> String.split(", ")
                  |> Enum.with_index()
                  |> Map.new()

  @card_strengths_with_jokers "A, K, Q, T, 9, 8, 7, 6, 5, 4, 3, 2, J"
                              |> String.split(", ")
                              |> Enum.with_index()
                              |> Map.new()

  def part1(input) do
    input
    |> parse_hands_and_bids()
    |> sort_by_strength()
    |> calculate_total_winnings()
  end

  def part2(input) do
    input
    |> parse_hands_and_bids()
    |> sort_by_strength(true)
    |> calculate_total_winnings()
  end

  def parse_hands_and_bids(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(&String.split/1)
    |> Enum.map(fn [h, b] -> {h, String.to_integer(b)} end)
  end

  defp sort_by_strength(hands_and_bids, with_jokers \\ false) do
    Enum.sort_by(
      hands_and_bids,
      fn {h, _b} ->
        {hand_type_strength(h, with_jokers), hand_cards_strength(h, with_jokers)}
      end,
      :desc
    )
  end

  defp calculate_total_winnings(sorted_hands_and_bids) do
    sorted_hands_and_bids
    |> Enum.with_index(1)
    |> Enum.map(fn {{_, b}, r} -> r * b end)
    |> Enum.sum()
  end

  defp hand_type_strength(hand, with_jokers) do
    @hand_type_strengths[hand_type(hand, with_jokers)]
  end

  defp hand_cards_strength(hand, with_jokers) do
    hand
    |> String.codepoints()
    |> Enum.map(&card_strength(&1, with_jokers))
  end

  defp card_strength(card, _with_jokers = false), do: @card_strengths[card]
  defp card_strength(card, _with_jokers = true), do: @card_strengths_with_jokers[card]

  def hand_type(hand, with_jokers) do
    hand
    |> count_card_frequencies()
    |> adjust_card_frequencies(with_jokers)
    |> Map.values()
    |> Enum.sort(:desc)
    |> case do
      [] -> :five_of_a_kind
      [5] -> :five_of_a_kind
      [4, 1] -> :four_of_a_kind
      [3, 2] -> :full_house
      [3, 1, 1] -> :three_of_a_kind
      [2, 2, 1] -> :two_pair
      [2, 1, 1, 1] -> :one_pair
      [1, 1, 1, 1, 1] -> :high_card
    end
  end

  def count_card_frequencies(hand) do
    hand
    |> String.codepoints()
    |> Enum.reduce(%{}, fn c, f -> Map.update(f, c, 1, &(&1 + 1)) end)
  end

  defp adjust_card_frequencies(frequencies, _with_jokers = false), do: frequencies

  defp adjust_card_frequencies(frequencies, _with_jokers = true) do
    case Map.pop(frequencies, "J", 0) do
      {5, _} ->
        %{"J" => 5}

      {jokers, frequencies} ->
        {card, count} = Enum.max_by(frequencies, fn {_card, count} -> count end)
        Map.put(frequencies, card, count + jokers)
    end
  end
end

defmodule Day7Test do
  use ExUnit.Case

  @example_input """
  32T3K 765
  T55J5 684
  KK677 28
  KTJJT 220
  QQQJA 483
  """

  test ".parse_hands_and_bids/1" do
    assert [
             {"32T3K", 765},
             {"T55J5", 684},
             {"KK677", 28},
             {"KTJJT", 220},
             {"QQQJA", 483}
           ] == Day7.parse_hands_and_bids(@example_input)
  end

  test ".hand_type/1" do
    assert :five_of_a_kind == Day7.hand_type("AAAAA", false)
    assert :four_of_a_kind == Day7.hand_type("AA8AA", false)
    assert :full_house == Day7.hand_type("23332", false)
    assert :three_of_a_kind == Day7.hand_type("TTT98", false)
    assert :two_pair == Day7.hand_type("23432", false)
    assert :one_pair == Day7.hand_type("A23A4", false)
    assert :high_card == Day7.hand_type("23456", false)
    assert :four_of_a_kind == Day7.hand_type("AAAAJ", false)
    assert :three_of_a_kind == Day7.hand_type("AA8AJ", false)
    assert :two_pair == Day7.hand_type("23J32", false)
    assert :one_pair == Day7.hand_type("TTJ98", false)
    assert :high_card == Day7.hand_type("J23A4", false)
    assert :five_of_a_kind == Day7.hand_type("AAAAJ", true)
    assert :four_of_a_kind == Day7.hand_type("AA8AJ", true)
    assert :full_house == Day7.hand_type("23J32", true)
    assert :three_of_a_kind == Day7.hand_type("TTJ98", true)
    assert :one_pair == Day7.hand_type("J23A4", true)
  end

  test "Part 1: Example" do
    assert 6440 == Day7.part1(@example_input)
  end

  test "Part 1: Input File" do
    assert 248_217_452 ==
             "/Users/polmiro/Development/aoc/2023/day-07/input.txt"
             |> File.read!()
             |> Day7.part1()
  end

  test "Part 2: Example" do
    assert 5905 == Day7.part2(@example_input)
  end

  test "Part 2: Input File" do
    assert 245_576_185 ==
             "/Users/polmiro/Development/aoc/2023/day-07/input.txt"
             |> File.read!()
             |> Day7.part2()
  end
end

ExUnit.run()
```
