# Day 6: Wait For It

```elixir
ExUnit.configure(exclude: [:skip])
ExUnit.start(autorun: false)
```

## Solution

```elixir
defmodule QuadraticEquation do
  @moduledoc """
    The module with the logic of the solution of the quadratic equation.
  """

  @doc """
    See the description of the module.
  """
  def calculation(a, b, c) do
    d = :math.pow(b, 2) - 4 * a * c

    if d >= 0 do
      x1 = (-1 * b + :math.sqrt(d)) / (2 * a)
      x2 = (-1 * b - :math.sqrt(d)) / (2 * a)
      {:ok, [x1: x1, x2: x2, d: d]}
    else
      {:error, "Discriminant less than zero!"}
    end
  end
end
```

```elixir
defmodule Day6 do
  def part1(input) do
    input
    |> parse_document_races()
    |> Enum.map(&calculate_ways_to_win/1)
    |> Enum.reduce(&Kernel.*/2)
  end

  def part2(input) do
    input
    |> parse_document_race()
    |> calculate_ways_to_win()
  end

  def parse_document_races(input) do
    input = String.split(input, "\n")

    time_line =
      input
      |> Enum.at(0)
      |> String.trim_leading("Time:")
      |> String.trim()
      |> String.split()
      |> Enum.map(&String.to_integer/1)

    distance_line =
      input
      |> Enum.at(1)
      |> String.trim_leading("Distance:")
      |> String.trim()
      |> String.split()
      |> Enum.map(&String.to_integer/1)

    Enum.zip(time_line, distance_line)
  end

  def parse_document_race(input) do
    input = String.split(input, "\n")

    time_line =
      input
      |> Enum.at(0)
      |> String.trim_leading("Time:")
      |> String.trim()
      |> String.split()
      |> Enum.join()
      |> String.to_integer()

    distance_line =
      input
      |> Enum.at(1)
      |> String.trim_leading("Distance:")
      |> String.trim()
      |> String.split()
      |> Enum.join()
      |> String.to_integer()

    {time_line, distance_line}
  end

  defp calculate_ways_to_win({time, distance}) do
    # distance = hold * (time - hold)
    # -hold^2 + time*hold - distance
    # -x^2 + time*x - 9 = 0
    {:ok, [x1: x1, x2: x2, d: _]} = QuadraticEquation.calculation(-1, time, -distance)
    from = if (f = floor(x2)) == x2, do: f - 1, else: f
    to = if (c = ceil(x1)) == x1, do: c + 1, else: c
    Range.size(from..to)
  end
end

defmodule Day6Test do
  use ExUnit.Case

  @example_input """
  Time:      7  15   30
  Distance:  9  40  200
  """

  test "parse_document_races/1" do
    assert [{7, 9}, {15, 40}, {30, 200}] == Day6.parse_document_races(@example_input)
  end

  test "Part 1: Example" do
    assert 288 == Day6.part1(@example_input)
  end

  test "Part 1: Input File" do
    assert 2_065_338 ==
             "/Users/polmiro/Development/aoc/2023/day-06/input.txt"
             |> File.read!()
             |> Day6.part1()
  end

  test "parse_document_race/1" do
    assert {71530, 940_200} = Day6.parse_document_race(@example_input)
  end

  test "Part 2: Example" do
    assert 71503 == Day6.part2(@example_input)
  end

  test "Part 2: Input File" do
    assert 34_934_171 ==
             "/Users/polmiro/Development/aoc/2023/day-06/input.txt"
             |> File.read!()
             |> Day6.part2()
  end
end

ExUnit.run()
```
