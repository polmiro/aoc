# Day 23: A Long Walk Alt

```elixir
ExUnit.configure(exclude: [:skip])
ExUnit.start(autorun: false)
```

## Solution

```elixir
defmodule Day23.Mode.Slopes do
  def parse_cell("#", pos), do: {pos, :forest}
  def parse_cell(".", pos), do: {pos, :path}
  def parse_cell(">", pos), do: {pos, :one_way_east}
  def parse_cell("<", pos), do: {pos, :one_way_west}
  def parse_cell("^", pos), do: {pos, :one_way_north}
  def parse_cell("v", pos), do: {pos, :one_way_south}
end

defmodule Day23.Mode.Flat do
  def parse_cell("#", pos), do: {pos, :forest}
  def parse_cell(_, pos), do: {pos, :path}
end

defmodule Day23 do
  def part1(input) do
    run(input, Day23.Mode.Slopes)
  end

  def part2(input) do
    run(input, Day23.Mode.Flat)
  end

  defp run(input, mode) do
    paths = parse_paths(input, mode)
    {origin, target} = origin_and_target(paths)

    paths
    |> with_neighbours()
    |> trails(origin, target)
    |> find_longest_trail(origin, target)
  end

  defp parse_paths(input, mode) do
    input
    |> String.split("\n", trim: true)
    |> Enum.with_index()
    |> Enum.flat_map(fn {row, i} ->
      row
      |> String.graphemes()
      |> Enum.with_index()
      |> Enum.map(fn {c, j} ->
        mode.parse_cell(c, {i, j})
      end)
    end)
    |> Enum.reject(fn {_, cell} -> cell == :forest end)
    |> Map.new()
  end

  defp with_neighbours(paths) do
    Map.new(paths, fn {position, cell} ->
      {
        position,
        cell
        |> neighbours(position)
        |> Enum.filter(&Map.has_key?(paths, &1))
      }
    end)
  end

  defp origin_and_target(paths) do
    {{origin, _}, {target, _}} = Enum.min_max_by(paths, fn {{i, _}, _} -> i end)
    {origin, target}
  end

  defp trails(neighbours, origin, target) do
    crossings = Map.keys(neighbours) |> Enum.filter(fn pos -> length(neighbours[pos]) > 2 end)

    Enum.concat([[origin], crossings, [target]])
    |> Enum.flat_map(fn position ->
      Enum.map(neighbours[position], &walk(neighbours, &1, [position]))
    end)
    |> Enum.map(fn trail -> {hd(trail), {length(trail), Enum.at(trail, -1)}} end)
    |> Enum.reduce(%{}, fn {head, trail_summary}, acc ->
      Map.update(acc, head, [trail_summary], &[trail_summary | &1])
    end)
  end

  defp walk(neighbours, position, acc = [prev | _]) do
    case neighbours[position] |> Enum.reject(&(&1 == prev)) do
      [next] -> walk(neighbours, next, [position | acc])
      [] -> Enum.reverse([position | acc])
      _ -> Enum.reverse([position | acc])
    end
  end

  defp find_longest_trail(trails, current, target, seen \\ MapSet.new())

  defp find_longest_trail(_trails, target, target, _seen), do: 0

  defp find_longest_trail(trails, current, target, seen) do
    if MapSet.member?(seen, current) do
      nil
    else
      seen = MapSet.put(seen, current)

      trails
      |> Map.get(current, [])
      |> Enum.map(fn {length, to} ->
        case find_longest_trail(trails, to, target, seen) do
          nil -> nil
          l -> length + l - 1
        end
      end)
      |> Enum.reject(&is_nil/1)
      |> Enum.max(fn -> nil end)
    end
  end

  defp neighbours(:path, {i, j}), do: [{i, j + 1}, {i + 1, j}, {i, j - 1}, {i - 1, j}]
  defp neighbours(:one_way_east, {i, j}), do: [{i, j + 1}]
  defp neighbours(:one_way_west, {i, j}), do: [{i, j - 1}]
  defp neighbours(:one_way_north, {i, j}), do: [{i - 1, j}]
  defp neighbours(:one_way_south, {i, j}), do: [{i + 1, j}]
end

defmodule Day23Test do
  use ExUnit.Case

  @example_input """
  #.#####################
  #.......#########...###
  #######.#########.#.###
  ###.....#.>.>.###.#.###
  ###v#####.#v#.###.#.###
  ###.>...#.#.#.....#...#
  ###v###.#.#.#########.#
  ###...#.#.#.......#...#
  #####.#.#.#######.#.###
  #.....#.#.#.......#...#
  #.#####.#.#.#########v#
  #.#...#...#...###...>.#
  #.#.#v#######v###.###v#
  #...#.>.#...>.>.#.###.#
  #####v#.#.###v#.#.###.#
  #.....#...#...#.#.#...#
  #.#########.###.#.#.###
  #...###...#...#...#.###
  ###.###.#.###v#####v###
  #...#...#.#.>.>.#.>.###
  #.###.###.#.###.#.#v###
  #.....###...###...#...#
  #####################.#
  """

  test "Part 1: Example Input" do
    assert 94 == Day23.part1(@example_input)
  end

  test "Part 1: Input File" do
    assert 2278 ==
             "/Users/polmiro/Development/aoc/2023/day-23/input.txt"
             |> File.read!()
             |> Day23.part1()
  end

  test "Part 2: Example Input" do
    assert 154 == Day23.part2(@example_input)
  end

  test "Part 2: Input File" do
    assert 6734 ==
             "/Users/polmiro/Development/aoc/2023/day-23/input.txt"
             |> File.read!()
             |> Day23.part2()
  end
end

ExUnit.run()
```
